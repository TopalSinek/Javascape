1.

public boolean icyHot(int temp1, int temp2) {
  if((temp1 < 0 && temp2 > 100) || (temp1 > 100 && temp2 < 0))
    return true;
  else
    return false;
}

2.

public String backAround(String str) {
  	int  n;	
  	char harf;
  
 	 n = str.length();
  	harf = str.charAt(n - 1);
  
  	return harf + str + harf;
}

3.

public int blackjack(int a, int b) {
	if(a <= 21 && b <= 21){
    	if(21 - a > 21 - b)
      		return b;
    	else
     		return a;  
  	}  
  	else if(a > 21 && b <= 21)
    	return b;
	else if(b > 21 && a <= 21)
		return a;
	else 
    	return 0;  
}

4.

public int withoutDoubles(int die1, int die2, boolean noDoubles) {
	if ( die1 != die2 )
		return (die1 + die2);
	if (noDoubles == true && die1 != 6 && die2 != 6 )
		return (die1 + die2 + 1 );
	if (noDoubles == false)
		return (die1 + die2);
	else
		return (die1 + 1);
}

5.

public int[] squareUp(int n) {
	int[] result = new int[n * n];
    int pos = 0;
 
    for (int i = 1; i <= n; i++) {
        for (int k = 1; k <= n - i; k++) result[pos++] = 0;
        for (int j = i; j > 0; j--) result[pos++] = j;
    }
    return result;
}

6.

public int maxMirror(int[] nums) {
	int[] numsCopy = new int[nums.length];
    for (int i = nums.length - 1, j = 0; i >= 0; i--, j++)
        numsCopy[j] = nums[i];
 
    int max = 0;
 
    for (int i = 0; i < nums.length; i++) {
        int count = 0;
        int pos1 = i;
        int pos2 = 0;
        boolean flag = false;
 
        while (pos1 < nums.length && pos2 < nums.length) {
            if (!flag) {
                if (nums[pos1] != numsCopy[pos2]) pos2++;
                else {
                    flag = true;
                    count = 1;
                    pos1++;
                    pos2++;
                }
            } else {
                if (nums[pos1] == numsCopy[pos2]) {
                    count++;
                    pos1++;
                    pos2++;
                } else {
                    if (count > max) max = count;
                    pos1 = i;
                    flag = false;
                }
            }
            if (count > max) max = count;
        }
    }
    return max;
}

7.

public int countClumps(int[] nums) {
	int count = 0;
    for (int i = 0; i < nums.length - 1; i++)
        if (nums[i] == nums[i + 1]) {
            count++;
            for (int j = i + 1; j < nums.length; j++)
                if (nums[j] == nums[i]) i++;
                else break;
        }
    return count;
}

8.

public int[] seriesUp(int n) {
	int[] result = new int[n * (n + 1) / 2];
    int pos = 0;
    int i = 1;
    while (i <= n + 1) {
        for (int j = 1; j < i; j++) result[pos++] = j;
        i++;
    }
    return result;
}

